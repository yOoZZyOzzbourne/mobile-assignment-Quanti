## Note: all of the config entries below are just examples with placeholders. Be sure to edit and adjust to your needs when uncommenting.

## In case your config entries all use a common input/output parent directory, you can specify those here.
##   Every input/output paths in the rest of the config will then be expressed relative to these.
##   Those two top-level keys are optional and default to "." (the directory of the config file).
input_dir: ../Ficek_QuantiApp/Infrastructure/Sources/UIToolkit/Resources
output_dir: ../Ficek_QuantiApp/Infrastructure/Sources/UIToolkit/Resources


## Generate constants for your localized strings.
##   Be sure that SwiftGen only parses ONE locale (typically Base.lproj, or en.lproj, or whichever your development region is); otherwise it will generate the same keys multiple times.
##   SwiftGen will parse all `.strings` files found in that folder.
strings:
    ## path to the en strings file relative from input_dir
    inputs: Localizable/en.lproj
    outputs:
        templatePath: localizedstringkey_strings_template.stencil
        output: LocalizedStringKey+keys.swift
        ## params are described in the template file
        params:
            # swiftLintDisableRules: true
            # noComments: true
            bundleModule: true
            publicAccess: true


## Generate constants for your Assets Catalogs, including constants for images, colors, ARKit resources, etc.
##   This example also shows how to provide additional parameters to your template to customize the output.
##   - Especially the `forceProvidesNamespaces: true` param forces to create sub-namespace for each folder/group used in your Asset Catalogs, even the ones without "Provides Namespace". Without this param, SwiftGen only generates sub-namespaces for folders/groups which have the "Provides Namespace" box checked in the Inspector pane.
##   - To know which params are supported for a template, use `swiftgen template doc xcassets swift5` to open the template documentation on GitHub.
xcassets:
    ## path to the images catalog relative from input_dir
  - inputs: Assets.xcassets
    outputs:
    - templatePath: asset_xcassets_template.stencil
      # destionation path for the generated file
      output: Image+assets.swift
      params:
        type: image
        # swiftLintDisableRules: true
        # allValues: true
        bundleModule: true
        publicAccess: true
    ## path to the colors catalog relative from input_dir
  # - inputs: Colors.xcassets
  #   outputs:
  #   - templatePath: asset_xcassets_template.stencil
  #     ## destionation path for the generated file
  #     output: Color+assets.swift
  #     params:
  #       type: color
        # swiftLintDisableRules: true
        # allValues: true
        # bundleModule: true
        # publicAccess: true


# files:
#   inputs: Assets/Videos
#   filter: .+\.mp4$
#   outputs:
#     templatePath: files_template.stencil
#     output: Files.swift
    # params:
    #   publicAccess: true


## There are other parsers available for you to use depending on your needs, for example:
##  - `fonts` (if you have custom ttf/ttc font files)
##  - `coredata` (for CoreData models)
##  - `json`, `yaml` and `plist` (to parse custom JSON/YAML/Plist files and generate code from their content)
## â€¦
##
## For more info, use `swiftgen config doc` to open the full documentation on GitHub.
## https://github.com/SwiftGen/SwiftGen/tree/6.6.2/Documentation/